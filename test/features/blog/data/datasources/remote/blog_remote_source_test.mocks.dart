// Mocks generated by Mockito 5.4.4 from annotations
// in clean_blog/test/features/blog/data/datasources/remote/blog_remote_source_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;
import 'dart:io' as _i7;

import 'package:clean_blog/features/blog/data/datasources/remote/blog_remote_db_store_service.dart'
    as _i3;
import 'package:clean_blog/features/blog/data/datasources/remote/blog_remote_storage_service.dart'
    as _i6;
import 'package:clean_blog/features/blog/data/models/blog_model.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeBlogModel_0 extends _i1.SmartFake implements _i2.BlogModel {
  _FakeBlogModel_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [CloudStoreBlogImpl].
///
/// See the documentation for Mockito's code generation for more information.
class MockCloudStoreBlogImpl extends _i1.Mock
    implements _i3.CloudStoreBlogImpl {
  @override
  String get collectionPath => (super.noSuchMethod(
        Invocation.getter(#collectionPath),
        returnValue: _i4.dummyValue<String>(
          this,
          Invocation.getter(#collectionPath),
        ),
        returnValueForMissingStub: _i4.dummyValue<String>(
          this,
          Invocation.getter(#collectionPath),
        ),
      ) as String);

  @override
  _i5.Future<List<_i2.BlogModel>> fetchAllFromCloud() => (super.noSuchMethod(
        Invocation.method(
          #fetchAllFromCloud,
          [],
        ),
        returnValue: _i5.Future<List<_i2.BlogModel>>.value(<_i2.BlogModel>[]),
        returnValueForMissingStub:
            _i5.Future<List<_i2.BlogModel>>.value(<_i2.BlogModel>[]),
      ) as _i5.Future<List<_i2.BlogModel>>);

  @override
  _i5.Future<_i2.BlogModel> saveToCloud(_i2.BlogModel? model) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveToCloud,
          [model],
        ),
        returnValue: _i5.Future<_i2.BlogModel>.value(_FakeBlogModel_0(
          this,
          Invocation.method(
            #saveToCloud,
            [model],
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i2.BlogModel>.value(_FakeBlogModel_0(
          this,
          Invocation.method(
            #saveToCloud,
            [model],
          ),
        )),
      ) as _i5.Future<_i2.BlogModel>);

  @override
  _i5.Future<bool> deleteFromCloud(String? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteFromCloud,
          [id],
        ),
        returnValue: _i5.Future<bool>.value(false),
        returnValueForMissingStub: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Future<_i2.BlogModel> fetchFromCloud(String? id) => (super.noSuchMethod(
        Invocation.method(
          #fetchFromCloud,
          [id],
        ),
        returnValue: _i5.Future<_i2.BlogModel>.value(_FakeBlogModel_0(
          this,
          Invocation.method(
            #fetchFromCloud,
            [id],
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i2.BlogModel>.value(_FakeBlogModel_0(
          this,
          Invocation.method(
            #fetchFromCloud,
            [id],
          ),
        )),
      ) as _i5.Future<_i2.BlogModel>);

  @override
  _i5.Future<_i2.BlogModel> updateInCloud(_i2.BlogModel? model) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateInCloud,
          [model],
        ),
        returnValue: _i5.Future<_i2.BlogModel>.value(_FakeBlogModel_0(
          this,
          Invocation.method(
            #updateInCloud,
            [model],
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i2.BlogModel>.value(_FakeBlogModel_0(
          this,
          Invocation.method(
            #updateInCloud,
            [model],
          ),
        )),
      ) as _i5.Future<_i2.BlogModel>);
}

/// A class which mocks [CloudStorageBlogImpl].
///
/// See the documentation for Mockito's code generation for more information.
class MockCloudStorageBlogImpl extends _i1.Mock
    implements _i6.CloudStorageBlogImpl {
  @override
  String get storagePath => (super.noSuchMethod(
        Invocation.getter(#storagePath),
        returnValue: _i4.dummyValue<String>(
          this,
          Invocation.getter(#storagePath),
        ),
        returnValueForMissingStub: _i4.dummyValue<String>(
          this,
          Invocation.getter(#storagePath),
        ),
      ) as String);

  @override
  _i5.Future<String> uploadFileToCloud(
    String? fileId,
    _i7.File? file,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #uploadToCloud,
          [
            fileId,
            file,
          ],
        ),
        returnValue: _i5.Future<String>.value(_i4.dummyValue<String>(
          this,
          Invocation.method(
            #uploadToCloud,
            [
              fileId,
              file,
            ],
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<String>.value(_i4.dummyValue<String>(
          this,
          Invocation.method(
            #uploadToCloud,
            [
              fileId,
              file,
            ],
          ),
        )),
      ) as _i5.Future<String>);
}
